{"version":3,"sources":["webpack/universalModuleDefinition","webpack/bootstrap","C:\\Users\\Alon\\Documents\\devel\\easy-template-x\\node_modules\\buffer\\index.js","C:\\Users\\Alon\\Documents\\devel\\easy-template-x\\node_modules\\process\\browser.js","C:\\Users\\Alon\\Documents\\devel\\easy-template-x\\node_modules\\webpack\\buildin\\global.js","C:\\Users\\Alon\\Documents\\devel\\easy-template-x\\src\\errors\\maxXmlDepthError.ts","C:\\Users\\Alon\\Documents\\devel\\easy-template-x\\src\\errors\\missingArgumentError.ts","C:\\Users\\Alon\\Documents\\devel\\easy-template-x\\src\\errors\\missingCloseDelimiterError.ts","C:\\Users\\Alon\\Documents\\devel\\easy-template-x\\src\\errors\\missingStartDelimiterError.ts","C:\\Users\\Alon\\Documents\\devel\\easy-template-x\\src\\errors\\unclosedTagError.ts","C:\\Users\\Alon\\Documents\\devel\\easy-template-x\\src\\errors\\unidentifiedFileTypeError.ts","C:\\Users\\Alon\\Documents\\devel\\easy-template-x\\src\\errors\\unknownPrefixError.ts","C:\\Users\\Alon\\Documents\\devel\\easy-template-x\\src\\errors\\unopenedTagError.ts","C:\\Users\\Alon\\Documents\\devel\\easy-template-x\\src\\errors\\unsupportedFileTypeError.ts","C:\\Users\\Alon\\Documents\\devel\\easy-template-x\\src\\errors\\index.ts","C:\\Users\\Alon\\Documents\\devel\\easy-template-x\\src\\compilation\\delimiterMark.ts","C:\\Users\\Alon\\Documents\\devel\\easy-template-x\\src\\utils\\array.ts","C:\\Users\\Alon\\Documents\\devel\\easy-template-x\\src\\utils\\index.ts","C:\\Users\\Alon\\Documents\\devel\\easy-template-x\\src\\xmlNode.ts","C:\\Users\\Alon\\Documents\\devel\\easy-template-x\\src\\compilation\\delimiterSearcher.ts","C:\\Users\\Alon\\Documents\\devel\\easy-template-x\\src\\compilation\\scopeData.ts","C:\\Users\\Alon\\Documents\\devel\\easy-template-x\\src\\compilation\\tag.ts","C:\\Users\\Alon\\Documents\\devel\\easy-template-x\\src\\compilation\\tagParser.ts","C:\\Users\\Alon\\Documents\\devel\\easy-template-x\\src\\compilation\\templateCompiler.ts","C:\\Users\\Alon\\Documents\\devel\\easy-template-x\\src\\compilation\\index.ts","C:\\Users\\Alon\\Documents\\devel\\easy-template-x\\src\\plugins\\templatePlugin.ts","C:\\Users\\Alon\\Documents\\devel\\easy-template-x\\src\\plugins\\loopPlugin.ts","C:\\Users\\Alon\\Documents\\devel\\easy-template-x\\src\\plugins\\rawXmlPlugin.ts","C:\\Users\\Alon\\Documents\\devel\\easy-template-x\\src\\docxParser.ts","C:\\Users\\Alon\\Documents\\devel\\easy-template-x\\src\\plugins\\textPlugin.ts","C:\\Users\\Alon\\Documents\\devel\\easy-template-x\\src\\plugins\\defaultPlugins.ts","C:\\Users\\Alon\\Documents\\devel\\easy-template-x\\src\\plugins\\index.ts","C:\\Users\\Alon\\Documents\\devel\\easy-template-x\\src\\delimiters.ts","C:\\Users\\Alon\\Documents\\devel\\easy-template-x\\src\\fileType.ts","C:\\Users\\Alon\\Documents\\devel\\easy-template-x\\src\\templateHandlerOptions.ts","C:\\Users\\Alon\\Documents\\devel\\easy-template-x\\src\\xmlParser.ts","C:\\Users\\Alon\\Documents\\devel\\easy-template-x\\src\\templateHandler.ts","C:\\Users\\Alon\\Documents\\devel\\easy-template-x\\src\\index.ts","C:\\Users\\Alon\\Documents\\devel\\easy-template-x\\src\\utils\\binary.ts","C:\\Users\\Alon\\Documents\\devel\\easy-template-x\\src\\utils\\platform.ts","external \"base64-js\"","external \"ieee754\"","external \"isarray\"","external \"jszip\"","external \"lodash.get\"","external \"xmldom\""],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,mDAAmD;AACxE;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,uCAAuC,SAAS;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;;AAEA;AACA;AACA,aAAa,iBAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gDAAgD,EAAE;AAClD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,eAAe;AACvC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,wBAAwB,QAAQ;AAChC;AACA,qBAAqB,eAAe;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,mBAAmB,cAAc;AACjuDAAuD,OAAO;AAC9D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA,uDAAuD,OAAO;AAC9D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,qBAAqB,QAAQ;AAC7B;AACA;AACA,GAAG;AACH;AACA,eAAe,SAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,YAAY;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;AC5vDA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qCAAqC;;AAErC;AACA;AACA;;AAEA,2BAA2B;AAC3B;AACA;AACA;AACA,4BAA4B,UAAU;;;;;;;;;;;;;ACvLtC;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;AACA;AACA,4CAA4C;;AAE5C;;;;;;;;;;;;;;;;;;;;;;;;;ACnBA;IAAsC,oCAAK;IAIvC,0BAAY,QAAgB;QAA5B,YACI,kBAAM,2CAAyC,QAAQ,OAAI,CAAC,SAM/D;QAJG,KAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAGzB,MAAM,CAAC,cAAc,CAAC,KAAI,EAAE,gBAAgB,CAAC,SAAS,CAAC,CAAC;;IAC5D,CAAC;IACL,uBAAC;AAAD,CAAC,CAZqC,KAAK,GAY1C;;;;;;;;;;;;;;ACZD;IAA0C,2DAAK;IAC3C,8BAAY,OAAe;QAA3B,YACI,kBAAM,eAAa,OAAO,kBAAe,CAAC,SAI7C;QADG,MAA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","file":"easy-template-x.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"easy-template-x\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"easy-template-x\"] = factory();\n\telse\n\t\troot[\"easy-template-x\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","export class MaxXmlDepthError extends Error {\r\n\r\n    public readonly maxDepth: number;\r\n\r\n    constructor(maxDepth: number) {\r\n        super(`XML maximum depth reached (max depth: ${maxDepth}).`);\r\n\r\n        this.maxDepth = maxDepth;\r\n\r\n        // typescript hack: https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n        Object.setPrototypeOf(this, MaxXmlDepthError.prototype);\r\n    }\r\n}","export class MissingArgumentError extends Error {\r\n    constructor(argName: string) {\r\n        super(`Argument '${argName}' is missing.`);\r\n\r\n        // typescript hack: https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n        Object.setPrototypeOf(this, MissingArgumentError.prototype);\r\n    }\r\n}","export class MissingCloseDelimiterError extends Error {\r\n\r\n    public readonly tagName: string;\r\n\r\n    constructor(tagName: string) {\r\n        super(`Tag '${tagName}' does not have a closing delimiter.`);\r\n\r\n        this.tagName = tagName;\r\n\r\n        // typescript hack: https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n        Object.setPrototypeOf(this, MissingCloseDelimiterError.prototype);\r\n    }\r\n}","export class MissingStartDelimiterError extends Error {\r\n\r\n    public readonly tagName: string;\r\n\r\n    constructor(tagName: string) {\r\n        super(`Tag '${tagName}' does not have an opening delimiter.`);\r\n\r\n        this.tagName = tagName;\r\n\r\n        // typescript hack: https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n        Object.setPrototypeOf(this, MissingStartDelimiterError.prototype);\r\n    }\r\n}","export class UnclosedTagError extends Error {\r\n\r\n    public readonly tagName: string;\r\n\r\n    constructor(tagName: string) {\r\n        super(`Tag '${tagName}' is never closed.`);\r\n\r\n        this.tagName = tagName;\r\n\r\n        // typescript hack: https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n        Object.setPrototypeOf(this, UnclosedTagError.prototype);\r\n    }\r\n}","export class UnidentifiedFileTypeError extends Error {\r\n    constructor() {\r\n        super(`The filetype for this file could not be identified, is this file corrupted?`);\r\n\r\n        // typescript hack: https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n        Object.setPrototypeOf(this, UnidentifiedFileTypeError.prototype);\r\n    }\r\n}","export class UnknownPrefixError extends Error {\r\n\r\n    public readonly tagRawText: string;\r\n\r\n    constructor(tagRawText: string) {\r\n        super(`Tag '${tagRawText}' does not match any of the known prefixes.`);\r\n\r\n        this.tagRawText = tagRawText;\r\n\r\n        // typescript hack: https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n        Object.setPrototypeOf(this, UnknownPrefixError.prototype);\r\n    }\r\n}","export class UnopenedTagError extends Error {\r\n\r\n    public readonly tagName: string;\r\n\r\n    constructor(tagName: string) {\r\n        super(`Tag '${tagName}' is closed but was never opened.`);\r\n\r\n        this.tagName = tagName;\r\n\r\n        // typescript hack: https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n        Object.setPrototypeOf(this, UnopenedTagError.prototype);\r\n    }\r\n}","export class UnsupportedFileTypeError extends Error {\r\n    constructor(fileType: string) {\r\n        super(`Filetype \"${fileType}\" is not supported.`);\r\n\r\n        // typescript hack: https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n        Object.setPrototypeOf(this, UnsupportedFileTypeError.prototype);\r\n    }\r\n}","export * from './maxXmlDepthError';\r\nexport * from './missingArgumentError';\r\nexport * from './missingCloseDelimiterError';\r\nexport * from './missingStartDelimiterError';\r\nexport * from './unclosedTagError';\r\nexport * from './unidentifiedFileTypeError';\r\nexport * from './unknownPrefixError';\r\nexport * from './unopenedTagError';\r\nexport * from './unsupportedFileTypeError';\r\n","import { XmlTextNode } from \"../xmlNode\";\r\n\r\nexport class DelimiterMark {\r\n\r\n    public xmlTextNode: XmlTextNode;\r\n    /**\r\n     * Index inside the text node\r\n     */\r\n    public index: number;\r\n    /**\r\n     * Is this an open delimiter or a close delimiter\r\n     */\r\n    public isOpen: boolean;\r\n\r\n    constructor(initial?: Partial<DelimiterMark>) {\r\n        Object.assign(this, initial);\r\n    }\r\n}","export function pushMany<T>(destArray: T[], items: T[]): void {\r\n    Array.prototype.push.apply(destArray, items);\r\n}\r\n\r\nexport function last<T>(array: T[]): T {\r\n    if (!array.length)\r\n        return undefined;\r\n    return array[array.length - 1];\r\n}","export * from './array';\r\nexport * from './binary';\r\nexport * from './platform';\r\nexport * from './types';\r\n","import { MissingArgumentError } from './errors';\r\nimport { last } from './utils';\r\n\r\nexport enum XmlNodeType {\r\n    Text = \"Text\",\r\n    General = \"General\"\r\n}\r\n\r\nexport type XmlNode = XmlTextNode | XmlGeneralNode;\r\n\r\nexport interface XmlNodeBase {\r\n    nodeType: XmlNodeType;\r\n    nodeName: string;\r\n    parentNode?: XmlNode;\r\n    childNodes?: XmlNode[];\r\n    nextSibling?: XmlNode;\r\n}\r\n\r\nexport const TEXT_NODE_NAME_VALUE = '#text'; // see: https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeName\r\n\r\nexport interface XmlTextNode extends XmlNodeBase {\r\n    nodeType: XmlNodeType.Text;\r\n    nodeName: typeof TEXT_NODE_NAME_VALUE;\r\n    textContent: string;\r\n}\r\n\r\nexport interface XmlGeneralNode extends XmlNodeBase {\r\n    nodeType: XmlNodeType.General;\r\n    attributes?: XmlAttribute[];\r\n}\r\n\r\nexport interface XmlAttribute {\r\n    name: string;\r\n    value: string;\r\n}\r\n\r\n// tslint:disable-next-line:no-namespace\r\nexport namespace XmlNode {\r\n\r\n    //\r\n    // constants\r\n    //\r\n\r\n    export const TEXT_NODE_NAME = TEXT_NODE_NAME_VALUE;\r\n\r\n    //\r\n    // factories\r\n    //\r\n\r\n    export function createTextNode(text?: string): XmlTextNode {\r\n        return {\r\n            nodeType: XmlNodeType.Text,\r\n            nodeName: XmlNode.TEXT_NODE_NAME,\r\n            textContent: text\r\n        };\r\n    }\r\n\r\n    export function createGeneralNode(name: string): XmlGeneralNode {\r\n        return {\r\n            nodeType: XmlNodeType.General,\r\n            nodeName: name\r\n        };\r\n    }\r\n\r\n    //\r\n    // serialization\r\n    //\r\n\r\n    /**\r\n     * Encode string to make it safe to use inside xml tags.\r\n     * \r\n     * https://stackoverflow.com/questions/7918868/how-to-escape-xml-entities-in-javascript\r\n     */\r\n    export function encodeValue(str: string): string {\r\n        if (str === null || str === undefined)\r\n            throw new MissingArgumentError(\"str\");\r\n        if (typeof str !== 'string')\r\n            throw new TypeError(`Expected a string, got '${(str as any).constructor.name}'.`);\r\n\r\n        return str.replace(/[<>&'\"]/g, c => {\r\n            switch (c) {\r\n                case '<': return '&lt;';\r\n                case '>': return '&gt;';\r\n                case '&': return '&amp;';\r\n                case '\\'': return '&apos;';\r\n                case '\"': return '&quot;';\r\n            }\r\n            return '';\r\n        });\r\n    }\r\n\r\n    export function serialize(node: XmlNode): string {\r\n        if (isTextNode(node))\r\n            return encodeValue(node.textContent) || '';\r\n\r\n        // attributes\r\n        let attributes = '';\r\n        if (node.attributes && node.attributes.length) {\r\n            attributes = ' ' + node.attributes\r\n                .map(attr => `${attr.name}=\"${attr.value}\"`)\r\n                .join(' ');\r\n        }\r\n\r\n        // open tag\r\n        const hasChildren = (node.childNodes || []).length > 0;\r\n        const suffix = hasChildren ? '' : '/';\r\n        const openTag = `<${node.nodeName}${attributes}${suffix}>`;\r\n\r\n        let xml: string;\r\n\r\n        if (hasChildren) {\r\n\r\n            // child nodes\r\n            const childrenXml = node.childNodes\r\n                .map(child => serialize(child))\r\n                .join('');\r\n\r\n            // close tag\r\n            const closeTag = `</${node.nodeName}>`;\r\n\r\n            xml = openTag + childrenXml + closeTag;\r\n        } else {\r\n            xml = openTag;\r\n        }\r\n\r\n        return xml;\r\n    }\r\n\r\n    /**\r\n     * The conversion is always deep.\r\n     */\r\n    export function fromDomNode(domNode: Node): XmlNode {\r\n        let xmlNode: XmlNode;\r\n\r\n        // basic properties\r\n        if (domNode.nodeType === domNode.TEXT_NODE) {\r\n\r\n            xmlNode = createTextNode(domNode.textContent);\r\n\r\n        } else {\r\n\r\n            xmlNode = createGeneralNode(domNode.nodeName);\r\n\r\n            // attributes\r\n            if (domNode.nodeType === domNode.ELEMENT_NODE) {\r\n                const attributes = (domNode as Element).attributes;\r\n                if (attributes) {\r\n                    (xmlNode as XmlGeneralNode).attributes = [];\r\n                    for (let i = 0; i < attributes.length; i++) {\r\n                        const curAttribute = attributes.item(i);\r\n                        (xmlNode as XmlGeneralNode).attributes.push({\r\n                            name: curAttribute.name,\r\n                            value: curAttribute.value\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // children\r\n        if (domNode.childNodes) {\r\n            xmlNode.childNodes = [];\r\n            let prevChild: XmlNode;\r\n            for (let i = 0; i < domNode.childNodes.length; i++) {\r\n\r\n                // clone child\r\n                const domChild = domNode.childNodes.item(i);\r\n                const curChild = fromDomNode(domChild);\r\n\r\n                // set references                \r\n                xmlNode.childNodes.push(curChild);\r\n                curChild.parentNode = xmlNode;\r\n                if (prevChild) {\r\n                    prevChild.nextSibling = curChild;\r\n                }\r\n                prevChild = curChild;\r\n            }\r\n        }\r\n\r\n        return xmlNode as XmlNode;\r\n    }\r\n\r\n    //\r\n    // core functions\r\n    //\r\n\r\n    export function isTextNode(node: XmlNode): node is XmlTextNode {\r\n        if (node.nodeType === XmlNodeType.Text || node.nodeName === TEXT_NODE_NAME) {\r\n            if (!(node.nodeType === XmlNodeType.Text && node.nodeName === TEXT_NODE_NAME)) {\r\n                throw new Error(`Invalid text node. Type: '${node.nodeType}', Name: '${node.nodeName}'.`);\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    export function cloneNode(node: XmlNode, deep: boolean): XmlNode {\r\n        if (!node)\r\n            throw new MissingArgumentError(nameof(node));\r\n\r\n        if (!deep) {\r\n            const clone = Object.assign({}, node);\r\n            clone.parentNode = null;\r\n            clone.childNodes = (node.childNodes ? [] : null);\r\n            clone.nextSibling = null;\r\n            return clone;\r\n        } else {\r\n            const clone = cloneNodeDeep(node);\r\n            clone.parentNode = null;\r\n            return clone;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Insert the node as a new sibling, before the original node.\r\n     *\r\n     * * **Note**: It is more efficient to use the insertChild function if you\r\n     *   already know the relevant index.\r\n     */\r\n    export function insertBefore(newNode: XmlNode, referenceNode: XmlNode): void {\r\n        if (!newNode)\r\n            throw new MissingArgumentError(nameof(newNode));\r\n        if (!referenceNode)\r\n            throw new MissingArgumentError(nameof(referenceNode));\r\n\r\n        if (!referenceNode.parentNode)\r\n            throw new Error(`'${nameof(referenceNode)}' has no parent`);\r\n\r\n        const childNodes = referenceNode.parentNode.childNodes;\r\n        const beforeNodeIndex = childNodes.indexOf(referenceNode);\r\n        XmlNode.insertChild(referenceNode.parentNode, newNode, beforeNodeIndex);\r\n    }\r\n\r\n    /**\r\n     * Insert the node as a new sibling, after the original node.\r\n     *\r\n     * * **Note**: It is more efficient to use the insertChild function if you\r\n     *   already know the relevant index.\r\n     */\r\n    export function insertAfter(newNode: XmlNode, referenceNode: XmlNode): void {\r\n        if (!newNode)\r\n            throw new MissingArgumentError(nameof(newNode));\r\n        if (!referenceNode)\r\n            throw new MissingArgumentError(nameof(referenceNode));\r\n\r\n        if (!referenceNode.parentNode)\r\n            throw new Error(`'${nameof(referenceNode)}' has no parent`);\r\n\r\n        const childNodes = referenceNode.parentNode.childNodes;\r\n        const referenceNodeIndex = childNodes.indexOf(referenceNode);\r\n        XmlNode.insertChild(referenceNode.parentNode, newNode, referenceNodeIndex + 1);\r\n    }\r\n\r\n    export function insertChild(parent: XmlNode, child: XmlNode, childIndex: number): void {\r\n        if (!parent)\r\n            throw new MissingArgumentError(nameof(parent));\r\n        if (isTextNode(parent))\r\n            throw new Error('Appending children to text nodes is forbidden');\r\n        if (!child)\r\n            throw new MissingArgumentError(nameof(child));\r\n\r\n        if (!parent.childNodes)\r\n            parent.childNodes = [];\r\n\r\n        // revert to append\r\n        if (childIndex === parent.childNodes.length) {\r\n            XmlNode.appendChild(parent, child);\r\n            return;\r\n        }\r\n\r\n        if (childIndex > parent.childNodes.length)\r\n            throw new RangeError(`Child index ${childIndex} is out of range. Parent has only ${parent.childNodes.length} child nodes.`);\r\n\r\n        // update references\r\n        child.parentNode = parent;\r\n\r\n        const childAfter = parent.childNodes[childIndex];\r\n        child.nextSibling = childAfter;\r\n\r\n        if (childIndex > 0) {\r\n            const childBefore = parent.childNodes[childIndex - 1];\r\n            childBefore.nextSibling = child;\r\n        }\r\n\r\n        // append\r\n        parent.childNodes.splice(childIndex, 0, child);\r\n    }\r\n\r\n    export function appendChild(parent: XmlNode, child: XmlNode): void {\r\n        if (!parent)\r\n            throw new MissingArgumentError(nameof(parent));\r\n        if (isTextNode(parent))\r\n            throw new Error('Appending children to text nodes is forbidden');\r\n        if (!child)\r\n            throw new MissingArgumentError(nameof(child));\r\n\r\n        if (!parent.childNodes)\r\n            parent.childNodes = [];\r\n\r\n        // update references\r\n        if (parent.childNodes.length) {\r\n            const currentLastChild = parent.childNodes[parent.childNodes.length - 1];\r\n            currentLastChild.nextSibling = child;\r\n        }\r\n        child.nextSibling = null;\r\n        child.parentNode = parent;\r\n\r\n        // append\r\n        parent.childNodes.push(child);\r\n    }\r\n\r\n    /**\r\n     * Removes the node from it's parent.\r\n     * \r\n     * * **Note**: It is more efficient to call removeChild(parent, childIndex).\r\n     */\r\n    export function remove(node: XmlNode): void {\r\n        if (!node)\r\n            throw new MissingArgumentError(nameof(node));\r\n\r\n        if (!node.parentNode)\r\n            throw new Error('Node has no parent');\r\n\r\n        removeChild(node.parentNode, node);\r\n    }\r\n\r\n    /**\r\n     * Remove a child node from it's parent. Returns the removed child.\r\n     * \r\n     * * **Note:** Prefer calling with explicit index.\r\n     */\r\n    export function removeChild(parent: XmlNode, child: XmlNode): XmlNode;\r\n    /**\r\n     * Remove a child node from it's parent. Returns the removed child.\r\n     */\r\n    export function removeChild(parent: XmlNode, childIndex: number): XmlNode;\r\n    export function removeChild(parent: XmlNode, childOrIndex: XmlNode | number): XmlNode {\r\n        if (!parent)\r\n            throw new MissingArgumentError(nameof(parent));\r\n        if (childOrIndex === null || childOrIndex === undefined)\r\n            throw new MissingArgumentError(nameof(childOrIndex));\r\n\r\n        if (!parent.childNodes || !parent.childNodes.length)\r\n            throw new Error('Parent node has node children');\r\n\r\n        // get child index\r\n        let childIndex: number;\r\n        if (typeof childOrIndex === 'number') {\r\n            childIndex = childOrIndex;\r\n        } else {\r\n            childIndex = parent.childNodes.indexOf(childOrIndex);\r\n            if (childIndex === -1)\r\n                throw new Error('Specified child node is not a child of the specified parent');\r\n        }\r\n\r\n        if (childIndex >= parent.childNodes.length)\r\n            throw new RangeError(`Child index ${childIndex} is out of range. Parent has only ${parent.childNodes.length} child nodes.`);\r\n\r\n        // update references\r\n        const child = parent.childNodes[childIndex];\r\n        if (childIndex > 0) {\r\n            const beforeChild = parent.childNodes[childIndex - 1];\r\n            beforeChild.nextSibling = child.nextSibling;\r\n        }\r\n        child.parentNode = null;\r\n        child.nextSibling = null;\r\n\r\n        // remove and return\r\n        return parent.childNodes.splice(childIndex, 1)[0];\r\n    }\r\n\r\n    //\r\n    // utility functions\r\n    //    \r\n\r\n    /**\r\n     * Gets the last direct child text node if it exists. Otherwise creates a\r\n     * new text node, appends it to 'node' and return the newly created text\r\n     * node.\r\n     *\r\n     * The function also makes sure the returned text node has a valid string\r\n     * value.\r\n     */\r\n    export function lastTextChild(node: XmlNode): XmlTextNode {\r\n        if (isTextNode(node)) {\r\n            return node;\r\n        }\r\n\r\n        // existing text nodes\r\n        if (node.childNodes) {\r\n            const allTextNodes = node.childNodes.filter(child => isTextNode(child)) as XmlTextNode[];\r\n            if (allTextNodes.length) {\r\n                const lastTextNode = last(allTextNodes);\r\n                if (!lastTextNode.textContent)\r\n                    lastTextNode.textContent = '';\r\n                return lastTextNode;\r\n            }\r\n        }\r\n\r\n        // create new text node\r\n        const newTextNode: XmlTextNode = {\r\n            nodeType: XmlNodeType.Text,\r\n            nodeName: TEXT_NODE_NAME,\r\n            textContent: ''\r\n        };\r\n\r\n        appendChild(node, newTextNode);\r\n        return newTextNode;\r\n    }\r\n\r\n    /**\r\n     * Remove sibling nodes between 'from' and 'to' excluding both.\r\n     * Return the removed nodes.\r\n     */\r\n    export function removeSiblings(from: XmlNode, to: XmlNode): XmlNode[] {\r\n        if (from === to)\r\n            return [];\r\n\r\n        const removed: XmlNode[] = [];\r\n        let lastRemoved: XmlNode;\r\n        from = from.nextSibling;\r\n        while (from !== to) {\r\n            const removeMe = from;\r\n            from = from.nextSibling;\r\n\r\n            XmlNode.remove(removeMe);\r\n            removed.push(removeMe);\r\n\r\n            if (lastRemoved)\r\n                lastRemoved.nextSibling = removeMe;\r\n            lastRemoved = removeMe;\r\n        }\r\n\r\n        return removed;\r\n    }\r\n\r\n    /**\r\n     * Split the original node into two sibling nodes.\r\n     * Returns both nodes.\r\n     *\r\n     * @param root The node to split\r\n     * @param markerNode The node that marks the split position.      \r\n     */\r\n    export function splitByChild(root: XmlNode, markerNode: XmlNode, removeMarkerNode: boolean): [ XmlNode, XmlNode ] {\r\n\r\n        // find the split path\r\n        const path = getDescendantPath(root, markerNode);\r\n\r\n        // split\r\n        const split = XmlNode.cloneNode(root, false);\r\n        const childIndex = path[0] + 1;\r\n        while (childIndex < root.childNodes.length) {\r\n            const curChild = root.childNodes[childIndex];\r\n            XmlNode.remove(curChild);\r\n            XmlNode.appendChild(split, curChild);\r\n        }\r\n\r\n        if (root.parentNode) {\r\n            XmlNode.insertAfter(split, root);\r\n        }\r\n\r\n        // remove marker node\r\n        if (removeMarkerNode && root.childNodes.length) {\r\n            XmlNode.removeChild(root, root.childNodes.length - 1);\r\n        }\r\n\r\n        return [ root, split ];\r\n    }\r\n\r\n    //\r\n    // private functions\r\n    //\r\n\r\n    function cloneNodeDeep(original: XmlNode): XmlNode {\r\n\r\n        const clone: XmlNode = ({} as any);\r\n\r\n        // basic properties\r\n        clone.nodeType = original.nodeType;\r\n        clone.nodeName = original.nodeName;\r\n        if (isTextNode(original)) {\r\n            (clone as XmlTextNode).textContent = original.textContent;\r\n        } else {\r\n            const attributes = original.attributes;\r\n            if (attributes) {\r\n                (clone as XmlGeneralNode).attributes = attributes.map(attr => ({ name: attr.name, value: attr.value }));\r\n            }\r\n        }\r\n\r\n        // children\r\n        if (original.childNodes) {\r\n            clone.childNodes = [];\r\n            let prevChildClone: XmlNode;\r\n            for (const child of original.childNodes) {\r\n\r\n                // clone child\r\n                const childClone = cloneNodeDeep(child);\r\n\r\n                // set references                \r\n                clone.childNodes.push(childClone);\r\n                childClone.parentNode = clone;\r\n                if (prevChildClone) {\r\n                    prevChildClone.nextSibling = childClone;\r\n                }\r\n                prevChildClone = childClone;\r\n            }\r\n        }\r\n\r\n        return clone;\r\n    }\r\n\r\n    function getDescendantPath(root: XmlNode, descendant: XmlNode): number[] {\r\n        const path: number[] = [];\r\n\r\n        let node = descendant;\r\n        while (node !== root) {\r\n            const parent = node.parentNode;\r\n            if (!parent)\r\n                throw new Error(`Argument ${nameof(descendant)} is not a descendant of ${nameof(root)}`);\r\n\r\n            const curChildIndex = parent.childNodes.indexOf(node);\r\n            path.push(curChildIndex);\r\n\r\n            node = parent;\r\n        }\r\n\r\n        return path.reverse();\r\n    }\r\n}","import { MaxXmlDepthError } from '../errors';\r\nimport { pushMany } from '../utils';\r\nimport { XmlNode, XmlTextNode } from '../xmlNode';\r\nimport { DelimiterMark } from './delimiterMark';\r\n\r\nexport class DelimiterSearcher {\r\n\r\n    public maxXmlDepth = 20;\r\n    public startDelimiter = \"{\";\r\n    public endDelimiter = \"}\";\r\n\r\n    public findDelimiters(node: XmlNode): DelimiterMark[] {\r\n        const delimiters: DelimiterMark[] = [];\r\n        this.findRecurse(node, delimiters, 0);\r\n        return delimiters;\r\n    }\r\n\r\n    private findRecurse(node: XmlNode, delimiters: DelimiterMark[], depth: number): void {\r\n        if (depth > this.maxXmlDepth)\r\n            throw new MaxXmlDepthError(this.maxXmlDepth);\r\n\r\n        if (!node)\r\n            return;\r\n\r\n        // process self\r\n        if (XmlNode.isTextNode(node)) {\r\n\r\n            const curTokens = this.findInNode(node);\r\n            if (curTokens.length) {\r\n                pushMany(delimiters, curTokens);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        // process child nodes\r\n        const childNodesLength = (node.childNodes ? node.childNodes.length : 0);\r\n        for (let i = 0; i < childNodesLength; i++) {\r\n            const child = node.childNodes[i];\r\n            this.findRecurse(child, delimiters, depth + 1);\r\n        }\r\n    }\r\n\r\n    private findInNode(node: XmlTextNode): DelimiterMark[] {\r\n\r\n        if (!node.textContent) {\r\n            return [];\r\n        }\r\n\r\n        // TODO: support delimiters longer than one character\r\n        \r\n        const delimiterMarks: DelimiterMark[] = [];\r\n        for (let i = 0; i < node.textContent.length; i++) {\r\n            if (node.textContent[i] === this.startDelimiter) {\r\n                delimiterMarks.push({\r\n                    index: i,\r\n                    isOpen: true,\r\n                    xmlTextNode: node\r\n                });\r\n            } else if (node.textContent[i] === this.endDelimiter) {\r\n                delimiterMarks.push({\r\n                    index: i,\r\n                    isOpen: false,\r\n                    xmlTextNode: node\r\n                });\r\n            }\r\n        }\r\n\r\n        return delimiterMarks;\r\n    }\r\n}","import { last } from \"../utils\";\r\n\r\nconst getProp = require('lodash.get');\r\n\r\nexport class ScopeData {\r\n    public path: (string | number)[] = [];\r\n    public readonly allData: any;\r\n\r\n    constructor(data: any) {\r\n        this.allData = data;\r\n    }\r\n\r\n    public getScopeData(): any {\r\n\r\n        const lastKey = last(this.path);\r\n\r\n        let result: any;\r\n        let curPath = this.path.slice();\r\n\r\n        while (result === undefined && curPath.length) {\r\n            const curScopePath = curPath.slice(0, curPath.length - 1);\r\n            result = getProp(this.allData, curScopePath.concat(lastKey));\r\n            curPath = curScopePath;\r\n        }\r\n        return result;\r\n    }\r\n}","import { XmlTextNode } from '../xmlNode';\r\n\r\nexport enum TagDisposition {\r\n    Open = \"Open\",\r\n    Close = \"Close\",\r\n    SelfClosed = \"SelfClosed\"\r\n}\r\n\r\nexport class Tag {\r\n    public name: string;\r\n    public type: string;\r\n    public rawText: string;\r\n    public disposition: TagDisposition;\r\n    public xmlTextNode: XmlTextNode;\r\n\r\n    constructor(initial?: Partial<Tag>) {\r\n        Object.assign(this, initial);\r\n    }\r\n}\r\n\r\nexport interface TagPrefix {\r\n    prefix: string;\r\n    tagType: string;\r\n    tagDisposition: TagDisposition;\r\n}","import { DocxParser } from '../docxParser';\r\nimport { MissingArgumentError, MissingCloseDelimiterError, MissingStartDelimiterError, UnknownPrefixError } from '../errors';\r\nimport { XmlTextNode } from '../xmlNode';\r\nimport { DelimiterMark } from './delimiterMark';\r\nimport { Tag, TagPrefix } from './tag';\r\n\r\nexport class TagParser {\r\n\r\n    public startDelimiter = \"{\";\r\n    public endDelimiter = \"}\";\r\n\r\n    constructor(\r\n        private readonly tagPrefixes: TagPrefix[],\r\n        private readonly docParser: DocxParser\r\n    ) {\r\n        if (!tagPrefixes || !tagPrefixes.length)\r\n            throw new MissingArgumentError(\"tagPrefixes\");\r\n        if (!docParser)\r\n            throw new MissingArgumentError(\"docParser\");\r\n    }\r\n\r\n    public parse(delimiters: DelimiterMark[]): Tag[] {\r\n        const tags: Tag[] = [];\r\n\r\n        let openedTag: Tag;\r\n        let openedDelimiter: DelimiterMark;\r\n        let lastNormalizedNode: XmlTextNode;\r\n        let lastInflictedOffset: number;\r\n        for (const delimiter of delimiters) {\r\n\r\n            // close before open\r\n            if (!openedTag && !delimiter.isOpen) {\r\n                // TODO: extract tag name\r\n                throw new MissingStartDelimiterError('Unknown');\r\n            }\r\n\r\n            // open before close\r\n            if (openedTag && delimiter.isOpen) {\r\n                // TODO: extract tag name\r\n                throw new MissingCloseDelimiterError('Unknown');\r\n            }\r\n\r\n            // valid open\r\n            if (!openedTag && delimiter.isOpen) {\r\n                openedTag = new Tag();\r\n                openedDelimiter = delimiter;\r\n            }\r\n\r\n            // valid close\r\n            if (openedTag && !delimiter.isOpen) {\r\n\r\n                // normalize the underlying xml structure\r\n                // (make sure the tag's node only includes the tag's text)\r\n                if (lastNormalizedNode === openedDelimiter.xmlTextNode) {\r\n                    openedDelimiter.index -= lastInflictedOffset;\r\n                }\r\n                if (lastNormalizedNode === delimiter.xmlTextNode) {\r\n                    delimiter.index -= lastInflictedOffset;\r\n                }\r\n                lastNormalizedNode = delimiter.xmlTextNode;\r\n                lastInflictedOffset = this.normalizeTagNodes(openedDelimiter, delimiter);\r\n                openedTag.xmlTextNode = openedDelimiter.xmlTextNode;\r\n\r\n                // extract tag info from tag's text\r\n                this.processTag(openedTag);\r\n                tags.push(openedTag);\r\n                openedTag = null;\r\n                openedDelimiter = null;\r\n            }\r\n        }\r\n\r\n        return tags;\r\n    }\r\n\r\n    /**\r\n     * Consolidate all tag's text into a single text node.\r\n     * \r\n     * Example: \r\n     * \r\n     * Input text node: \"some text {some tag} some more text\" \r\n     * Output text nodes: [ \"some text \", \"{tag1}\", \" some more text\" ]\r\n     */\r\n    private normalizeTagNodes(openDelimiter: DelimiterMark, closeDelimiter: DelimiterMark): number {\r\n\r\n        // we change the node's text and therefor needs to update following delimiters\r\n        let inflictedOffset = 0;\r\n\r\n        let startTextNode = openDelimiter.xmlTextNode;\r\n        let endTextNode = closeDelimiter.xmlTextNode;\r\n        const sameNode = (startTextNode === endTextNode);\r\n\r\n        // trim start\r\n        if (openDelimiter.index > 0) {\r\n            inflictedOffset += openDelimiter.index;\r\n            this.docParser.splitTextNode(startTextNode, openDelimiter.index, true);\r\n        }\r\n\r\n        // trim end\r\n        if (closeDelimiter.index < endTextNode.textContent.length - 1) {\r\n            inflictedOffset += closeDelimiter.index + 1;\r\n            endTextNode = this.docParser.splitTextNode(endTextNode, closeDelimiter.index + 1, true);\r\n            if (sameNode) {\r\n                startTextNode = endTextNode;\r\n            }\r\n        }\r\n\r\n        // join nodes\r\n        if (!sameNode) {\r\n            this.docParser.joinTextNodesRange(startTextNode, endTextNode);\r\n            endTextNode = startTextNode;\r\n        }\r\n\r\n        // update references\r\n        openDelimiter.xmlTextNode = startTextNode;\r\n        closeDelimiter.xmlTextNode = endTextNode;\r\n\r\n        // return the created offset\r\n        return inflictedOffset;\r\n    }\r\n\r\n    private processTag(tag: Tag): void {\r\n        tag.rawText = tag.xmlTextNode.textContent;\r\n        for (const prefix of this.tagPrefixes) {\r\n\r\n            // TODO: compile regex once\r\n            const pattern = `^[${this.startDelimiter}](\\\\s*?)${prefix.prefix}(.*?)[${this.endDelimiter}]`;\r\n            const regex = new RegExp(pattern, 'gmi');\r\n\r\n            const match = regex.exec(tag.rawText);\r\n            if (match && match.length) {\r\n                tag.name = match[2];\r\n                tag.type = prefix.tagType;\r\n                tag.disposition = prefix.tagDisposition;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (!tag.name)\r\n            throw new UnknownPrefixError(tag.rawText);\r\n    }\r\n}","import { UnclosedTagError } from '../errors';\r\nimport { TemplatePlugin } from '../plugins';\r\nimport { XmlNode } from '../xmlNode';\r\nimport { DelimiterSearcher } from './delimiterSearcher';\r\nimport { ScopeData } from './scopeData';\r\nimport { Tag, TagDisposition } from './tag';\r\nimport { TagParser } from './tagParser';\r\nimport { TemplateContext } from './templateContext';\r\n\r\n/**\r\n * The TemplateCompiler works roughly the same way as a source code compiler.\r\n * It's main steps are:\r\n * \r\n * 1. find delimiters (lexical analysis) :: (Document) => DelimiterMark[]\r\n * 2. extract tags (syntax analysis) :: (DelimiterMark[]) => Tag[]\r\n * 3. perform document replace (code generation) :: (Tag[], data) => Document*\r\n * \r\n * see: https://en.wikipedia.org/wiki/Compiler\r\n */\r\nexport class TemplateCompiler {\r\n\r\n    constructor(\r\n        private readonly delimiterSearcher: DelimiterSearcher,\r\n        private readonly tagParser: TagParser,\r\n        private readonly plugins: TemplatePlugin[]) {\r\n    }\r\n\r\n    /**\r\n     * Compiles the template and performs the required replacements using the\r\n     * specified data.\r\n     */\r\n    public compile(node: XmlNode, data: ScopeData, context: TemplateContext): void {\r\n        const delimiters = this.delimiterSearcher.findDelimiters(node);\r\n        const tags = this.tagParser.parse(delimiters);\r\n        this.doTagReplacements(tags, data, context);\r\n    }\r\n\r\n    //\r\n    // private methods\r\n    //\r\n\r\n    private doTagReplacements(tags: Tag[], data: ScopeData, context: TemplateContext): void {\r\n\r\n        for (let i = 0; i < tags.length; i++) {\r\n\r\n            const tag = tags[i];\r\n            data.path.push(tag.name);\r\n\r\n            if (tag.disposition === TagDisposition.SelfClosed) {\r\n\r\n                // replace simple tag\r\n                for (const plugin of this.plugins) {\r\n                    if (plugin.prefixes.some(prefix => prefix.tagType === tag.type)) {\r\n                        plugin.simpleTagReplacements(tag, data, context);\r\n                        break;\r\n                    }\r\n                }\r\n\r\n            } else if (tag.disposition === TagDisposition.Open) {\r\n\r\n                // get all tags between the open and close tags\r\n                const j = this.findCloseTagIndex(i, tag, tags);\r\n                const scopeTags = tags.slice(i, j + 1);\r\n                i = j;\r\n\r\n                // replace container tag\r\n                for (const plugin of this.plugins) {\r\n                    if (plugin.prefixes.some(prefix => prefix.tagType === tag.type)) {\r\n                        plugin.containerTagReplacements(scopeTags, data, context);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            data.path.pop();\r\n        }\r\n    }\r\n\r\n    private findCloseTagIndex(fromIndex: number, openTag: Tag, tags: Tag[]): number {\r\n\r\n        let i = fromIndex;\r\n        for (; i < tags.length; i++) {\r\n            const closeTag = tags[i];\r\n            if (\r\n                closeTag.name === openTag.name &&\r\n                closeTag.type === openTag.type &&\r\n                closeTag.disposition === TagDisposition.Close\r\n            ) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (i === tags.length) {\r\n            throw new UnclosedTagError(openTag.name);\r\n        }\r\n\r\n        return i;\r\n    }\r\n}","export * from './delimiterMark';\r\nexport * from './delimiterSearcher';\r\nexport * from './scopeData';\r\nexport * from './tag';\r\nexport * from './tagParser';\r\nexport * from './templateCompiler';\r\nexport * from './templateContext';\r\n","import { ScopeData, Tag, TagPrefix, TemplateCompiler, TemplateContext } from '../compilation';\r\nimport { DocxParser } from '../docxParser';\r\nimport { XmlParser } from '../xmlParser';\r\n\r\nexport interface PluginUtilities {\r\n    compiler: TemplateCompiler;\r\n    docxParser: DocxParser;\r\n    xmlParser: XmlParser;\r\n}\r\n\r\nexport abstract class TemplatePlugin {\r\n\r\n    public abstract get prefixes(): TagPrefix[];\r\n\r\n    protected utilities: PluginUtilities;\r\n\r\n    /**\r\n     * Called by the TemplateHandler at runtime.\r\n     */\r\n    public setUtilities(utilities: PluginUtilities) {\r\n        this.utilities = utilities;\r\n    }\r\n\r\n    /**\r\n     * This method is called for each self-closing tag.\r\n     * It should implement the specific document manipulation required by the tag.\r\n     */\r\n    public simpleTagReplacements(tag: Tag, data: ScopeData, context: TemplateContext): void {\r\n        // noop\r\n    }\r\n\r\n    /**\r\n     * This method is called for each container tag. It should implement the\r\n     * specific document manipulation required by the tag.\r\n     *\r\n     * @param tags All tags between the opening tag and closing tag (inclusive,\r\n     * i.e. tags[0] is the opening tag and the last item in the tags array is\r\n     * the closing tag).\r\n     */\r\n    public containerTagReplacements(tags: Tag[], data: ScopeData, context: TemplateContext): void {\r\n        // noop\r\n    }\r\n}","import { ScopeData, Tag, TagDisposition, TagPrefix, TemplateContext } from '../compilation';\r\nimport { last } from '../utils';\r\nimport { XmlNode } from '../xmlNode';\r\nimport { TemplatePlugin } from './templatePlugin';\r\n\r\nexport class LoopPlugin extends TemplatePlugin {\r\n\r\n    public readonly prefixes: TagPrefix[] = [\r\n        {\r\n            prefix: '#',\r\n            tagType: 'loop',\r\n            tagDisposition: TagDisposition.Open\r\n        },\r\n        {\r\n            prefix: '/',\r\n            tagType: 'loop',\r\n            tagDisposition: TagDisposition.Close\r\n        }\r\n    ];\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    public containerTagReplacements(tags: Tag[], data: ScopeData, context: TemplateContext): void {\r\n\r\n        let value: any[] = data.getScopeData();\r\n\r\n        if (!value || !Array.isArray(value) || !value.length)\r\n            value = [];\r\n\r\n        // vars\r\n        const openTag = tags[0];\r\n        const closeTag = last(tags);\r\n        let firstNode = this.utilities.docxParser.containingParagraphNode(openTag.xmlTextNode);\r\n        let lastNode = this.utilities.docxParser.containingParagraphNode(closeTag.xmlTextNode);\r\n        let middleNodes: XmlNode[];\r\n        const sameNodes = (firstNode === lastNode);\r\n\r\n        // extract relevant content        \r\n        const result = this.splitParagraphs(openTag.xmlTextNode, closeTag.xmlTextNode);\r\n        firstNode = result.firstParagraph;\r\n        lastNode = result.lastParagraph;\r\n        middleNodes = result.middleParagraphs;\r\n\r\n        // repeat (loop) the content\r\n        const repeatedNodes = this.repeat(middleNodes, value.length);\r\n\r\n        // recursive compilation \r\n        // (this step can be optimized in the future if we'll keep track of the\r\n        // path to each token and use that to create new tokens instead of\r\n        // search through the text again)\r\n        const compiledNodes = this.compile(repeatedNodes, data, context);\r\n\r\n        // merge back to the document\r\n        this.mergeBack(compiledNodes, firstNode, lastNode, sameNodes);\r\n    }\r\n\r\n    private splitParagraphs(openTagNode: XmlNode, closeTagNode: XmlNode): ExtractParagraphsResult {\r\n\r\n        // gather some info\r\n        let firstParagraph = this.utilities.docxParser.containingParagraphNode(openTagNode);\r\n        let lastParagraph = this.utilities.docxParser.containingParagraphNode(closeTagNode);\r\n        const areSame = (firstParagraph === lastParagraph);\r\n        const parent = firstParagraph.parentNode;\r\n        const firstParagraphIndex = parent.childNodes.indexOf(firstParagraph);\r\n        const lastParagraphIndex = areSame ? firstParagraphIndex : parent.childNodes.indexOf(lastParagraph);\r\n\r\n        // split first paragraphs\r\n        let splitResult = XmlNode.splitByChild(firstParagraph, openTagNode, true);\r\n        firstParagraph = splitResult[0];\r\n        const firstParagraphSplit = splitResult[1];\r\n        if (areSame)\r\n            lastParagraph = firstParagraphSplit;\r\n\r\n        // split last paragraph\r\n        splitResult = XmlNode.splitByChild(lastParagraph, closeTagNode, true);\r\n        const lastParagraphSplit = splitResult[0];\r\n        lastParagraph = splitResult[1];\r\n\r\n        // fix references\r\n        XmlNode.removeChild(parent, firstParagraphIndex + 1);\r\n        if (!areSame)\r\n            XmlNode.removeChild(parent, lastParagraphIndex);\r\n        firstParagraphSplit.parentNode = null;\r\n        lastParagraphSplit.parentNode = null;\r\n\r\n        // extract all paragraphs in between\r\n        let middleParagraphs: XmlNode[];\r\n        if (areSame) {\r\n            this.utilities.docxParser.joinParagraphs(firstParagraphSplit, lastParagraphSplit);\r\n            middleParagraphs = [firstParagraphSplit];\r\n        } else {\r\n            const inBetween = XmlNode.removeSiblings(firstParagraph, lastParagraph);\r\n            middleParagraphs = [firstParagraphSplit].concat(inBetween).concat(lastParagraphSplit);\r\n        }\r\n\r\n        return {\r\n            firstParagraph,\r\n            middleParagraphs,\r\n            lastParagraph\r\n        };\r\n    }\r\n\r\n    private repeat(nodes: XmlNode[], times: number): XmlNode[][] {\r\n        if (!nodes.length || !times)\r\n            return [];\r\n\r\n        const allResults: XmlNode[][] = [];\r\n\r\n        for (let i = 0; i < times; i++) {\r\n            const curResult = nodes.map(node => XmlNode.cloneNode(node, true));\r\n            allResults.push(curResult);\r\n        }\r\n\r\n        return allResults;\r\n    }\r\n\r\n    private compile(nodeGroups: XmlNode[][], data: ScopeData, context: TemplateContext): XmlNode[][] {\r\n        const compiledNodeGroups: XmlNode[][] = [];\r\n\r\n        // compile each node group with it's relevant data\r\n        for (let i = 0; i < nodeGroups.length; i++) {\r\n\r\n            // create dummy root node\r\n            const curNodes = nodeGroups[i];\r\n            const dummyRootNode = XmlNode.createGeneralNode('dummyRootNode');\r\n            curNodes.forEach(node => XmlNode.appendChild(dummyRootNode, node));\r\n\r\n            // compile the new root\r\n            data.path.push(i);\r\n            this.utilities.compiler.compile(dummyRootNode, data, context);\r\n            data.path.pop();\r\n\r\n            // disconnect from dummy root\r\n            const curResult: XmlNode[] = [];\r\n            while (dummyRootNode.childNodes && dummyRootNode.childNodes.length) {\r\n                const child = XmlNode.removeChild(dummyRootNode, 0);\r\n                curResult.push(child);\r\n            }\r\n            compiledNodeGroups.push(curResult);\r\n        }\r\n\r\n        return compiledNodeGroups;\r\n    }\r\n\r\n    private mergeBack(nodeGroups: XmlNode[][], firstParagraph: XmlNode, lastParagraph: XmlNode, sameNodes: boolean): void {\r\n\r\n        let mergeTo = firstParagraph;\r\n        for (const curNodeGroup of nodeGroups) {\r\n\r\n            // merge first paragraphs\r\n            this.utilities.docxParser.joinParagraphs(mergeTo, curNodeGroup[0]);\r\n\r\n            // add middle and last paragraphs to the original document\r\n            for (let i = 1; i < curNodeGroup.length; i++) {\r\n                XmlNode.insertBefore(curNodeGroup[i], lastParagraph);\r\n                mergeTo = curNodeGroup[i];\r\n            }\r\n        }\r\n\r\n        // merge last paragraph\r\n        this.utilities.docxParser.joinParagraphs(mergeTo, lastParagraph);\r\n\r\n        // remove the old last paragraph (was merged into the new one)\r\n        XmlNode.remove(lastParagraph);\r\n    }\r\n}\r\n\r\ninterface ExtractParagraphsResult {\r\n    firstParagraph: XmlNode;\r\n    middleParagraphs: XmlNode[];\r\n    lastParagraph: XmlNode;\r\n}","import { ScopeData, Tag, TagDisposition, TagPrefix } from '../compilation';\r\nimport { XmlNode } from '../xmlNode';\r\nimport { TemplatePlugin } from './templatePlugin';\r\n\r\nexport class RawXmlPlugin extends TemplatePlugin {\r\n\r\n    public readonly prefixes: TagPrefix[] = [{\r\n        prefix: '@',\r\n        tagType: 'rawXml',\r\n        tagDisposition: TagDisposition.SelfClosed\r\n    }];\r\n\r\n    /**\r\n     * Replace the current <w:t> node with the specified xml markup.\r\n     */\r\n    public simpleTagReplacements(tag: Tag, data: ScopeData): void {\r\n\r\n        const wordTextNode = this.utilities.docxParser.containingTextNode(tag.xmlTextNode);\r\n\r\n        const value = data.getScopeData();\r\n        if (typeof value === 'string') {\r\n            const newNode = this.utilities.xmlParser.parse(value);\r\n            XmlNode.insertBefore(newNode, wordTextNode);\r\n        }\r\n\r\n        XmlNode.remove(wordTextNode);\r\n    }\r\n}","import * as JSZip from 'jszip';\r\nimport { XmlNode, XmlTextNode } from './xmlNode';\r\n\r\nexport class DocxParser {\r\n\r\n    public static readonly PARAGRAPH_NODE = 'w:p';\r\n    public static readonly RUN_NODE = 'w:r';\r\n    public static readonly TEXT_NODE = 'w:t';\r\n\r\n    // In Word text nodes are contained in \"run\" nodes (which specifies text\r\n    // properties such as font and color). The \"run\" nodes in turn are\r\n    // contained in paragraph nodes which is the core unit of content.\r\n    //\r\n    // Example:\r\n    //\r\n    // <w:p>    <-- paragraph\r\n    //   <w:r>      <-- run\r\n    //     <w:rPr>      <-- run properties\r\n    //       <w:b/>     <-- bold\r\n    //     </w:rPr>\r\n    //     <w:t>This is text.</w:t>     <-- actual text\r\n    //   </w:r>\r\n    // </w:p> \r\n    //\r\n    // see: http://officeopenxml.com/WPcontentOverview.php\r\n\r\n    public contentFilePaths(zip: JSZip) {\r\n        const baseTags = [\r\n            // \"docProps/core.xml\",\r\n            // \"docProps/app.xml\",\r\n            \"word/document.xml\",\r\n            \"word/document2.xml\"\r\n        ];\r\n\r\n        const headersAndFooters = zip\r\n            .file(/word\\/(header|footer)\\d+\\.xml/)\r\n            .map(file => file.name);\r\n\r\n        return headersAndFooters.concat(baseTags);\r\n    }\r\n\r\n    public mainFilePath(zip: JSZip): string {\r\n        if (zip.files[\"word/document.xml\"]) {\r\n            return \"word/document.xml\";\r\n        }\r\n        if (zip.files[\"word/document2.xml\"]) {\r\n            return \"word/document2.xml\";\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Split the text node into two text nodes, each with it's own wrapping <w:t> node.\r\n     * Returns the newly created text node.\r\n     * \r\n     * @param textNode \r\n     * @param splitIndex \r\n     * @param addBefore Should the new node be added before or after the original node.\r\n     */\r\n    public splitTextNode(textNode: XmlTextNode, splitIndex: number, addBefore: boolean): XmlTextNode {\r\n\r\n        let firstXmlTextNode: XmlTextNode;\r\n        let secondXmlTextNode: XmlTextNode;\r\n\r\n        // split nodes\r\n        const wordTextNode = this.containingTextNode(textNode);\r\n        const newWordTextNode = XmlNode.cloneNode(wordTextNode, true);\r\n        if (addBefore) {\r\n\r\n            // insert new node before existing one\r\n            XmlNode.insertBefore(newWordTextNode, wordTextNode);\r\n\r\n            firstXmlTextNode = XmlNode.lastTextChild(newWordTextNode);\r\n            secondXmlTextNode = textNode;\r\n\r\n        } else {\r\n\r\n            // insert new node after existing one\r\n            const curIndex = wordTextNode.parentNode.childNodes.indexOf(wordTextNode);\r\n            XmlNode.insertChild(wordTextNode.parentNode, newWordTextNode, curIndex + 1);\r\n\r\n            firstXmlTextNode = textNode;\r\n            secondXmlTextNode = XmlNode.lastTextChild(newWordTextNode);\r\n        }\r\n\r\n        // edit text\r\n        const firstText = firstXmlTextNode.textContent;\r\n        const secondText = secondXmlTextNode.textContent;\r\n        firstXmlTextNode.textContent = firstText.substring(0, splitIndex);\r\n        secondXmlTextNode.textContent = secondText.substring(splitIndex);\r\n\r\n        return (addBefore ? firstXmlTextNode : secondXmlTextNode);\r\n    }\r\n\r\n    /**\r\n     * Move all text between the 'from' and 'to' nodes to the 'from' node.\r\n     */\r\n    public joinTextNodesRange(from: XmlTextNode, to: XmlTextNode): void {\r\n\r\n        // find run nodes\r\n        const firstRunNode = this.containingRunNode(from);\r\n        const secondRunNode = this.containingRunNode(to);\r\n\r\n        const paragraphNode = firstRunNode.parentNode;\r\n        if (secondRunNode.parentNode !== paragraphNode)\r\n            throw new Error('Can not join text nodes from separate paragraphs.');\r\n\r\n        // find \"word text nodes\"\r\n        const firstWordTextNode = this.containingTextNode(from);\r\n        const secondWordTextNode = this.containingTextNode(to);\r\n        const totalText: string[] = [];\r\n\r\n        // iterate runs\r\n        let curRunNode = firstRunNode;\r\n        while (curRunNode) {\r\n\r\n            // iterate text nodes\r\n            let curWordTextNode: XmlNode;\r\n            if (curRunNode === firstRunNode) {\r\n                curWordTextNode = firstWordTextNode;\r\n            } else {\r\n                curWordTextNode = this.firstTextNodeChild(curRunNode);\r\n            }\r\n            while (curWordTextNode) {\r\n\r\n                if (curWordTextNode.nodeName !== DocxParser.TEXT_NODE)\r\n                    continue;\r\n\r\n                // move text to first node\r\n                const curXmlTextNode = XmlNode.lastTextChild(curWordTextNode);\r\n                totalText.push(curXmlTextNode.textContent);\r\n\r\n                // next text node\r\n                const textToRemove = curWordTextNode;\r\n                if (curWordTextNode === secondWordTextNode) {\r\n                    curWordTextNode = null;\r\n                } else {\r\n                    curWordTextNode = curWordTextNode.nextSibling;\r\n                }\r\n\r\n                // remove current text node\r\n                if (textToRemove !== firstWordTextNode) {\r\n                    XmlNode.remove(textToRemove);\r\n                }\r\n            }\r\n\r\n            // next run\r\n            const runToRemove = curRunNode;\r\n            if (curRunNode === secondRunNode) {\r\n                curRunNode = null;\r\n            } else {\r\n                curRunNode = curRunNode.nextSibling;\r\n            }\r\n\r\n            // remove current run\r\n            if (!runToRemove.childNodes || !runToRemove.childNodes.length) {\r\n                XmlNode.remove(runToRemove);\r\n            }\r\n        }\r\n\r\n        // set the text content\r\n        const firstXmlTextNode = XmlNode.lastTextChild(firstWordTextNode);\r\n        firstXmlTextNode.textContent = totalText.join('');\r\n    }\r\n\r\n    /**\r\n     * Take all runs from 'second' and move them to 'first'.\r\n     */\r\n    public joinParagraphs(first: XmlNode, second: XmlNode): void {\r\n        if (first === second)\r\n            return;\r\n\r\n        let childIndex = 0;\r\n        while (second.childNodes && childIndex < second.childNodes.length) {\r\n            const curChild = second.childNodes[childIndex];\r\n            if (curChild.nodeName === DocxParser.RUN_NODE) {\r\n                XmlNode.removeChild(second, childIndex);\r\n                XmlNode.appendChild(first, curChild);\r\n            } else {\r\n                childIndex++;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Search for the first child **Word** text node (i.e. a <w:t> node).\r\n     */\r\n    public firstTextNodeChild(node: XmlNode): XmlNode {\r\n\r\n        if (!node)\r\n            return null;\r\n\r\n        if (node.nodeName !== DocxParser.RUN_NODE)\r\n            return null;\r\n\r\n        if (!node.childNodes)\r\n            return null;\r\n\r\n        for (const child of node.childNodes) {\r\n            if (child.nodeName === DocxParser.TEXT_NODE)\r\n                return child;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Search **upwards** for the first **Word** text node (i.e. a <w:t> node).\r\n     */\r\n    public containingTextNode(node: XmlTextNode): XmlNode {\r\n\r\n        if (!node)\r\n            return null;\r\n\r\n        if (!XmlNode.isTextNode(node))\r\n            throw new Error(`'Invalid argument ${\"node\"}. Expected a XmlTextNode.`);\r\n\r\n        let genNode = (node as XmlNode);\r\n        while (genNode.parentNode) {\r\n\r\n            if (genNode.nodeName === DocxParser.TEXT_NODE)\r\n                return genNode;\r\n\r\n            genNode = genNode.parentNode;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Search **upwards** for the first run node.\r\n     */\r\n    public containingRunNode(node: XmlNode): XmlNode {\r\n        if (!node)\r\n            return null;\r\n\r\n        if (node.nodeName === DocxParser.RUN_NODE)\r\n            return node;\r\n\r\n        return this.containingRunNode(node.parentNode);\r\n    }\r\n\r\n    /**\r\n     * Search **upwards** for the first paragraph node.\r\n     */\r\n    public containingParagraphNode(node: XmlNode): XmlNode {\r\n        if (!node)\r\n            return null;\r\n\r\n        if (node.nodeName === DocxParser.PARAGRAPH_NODE)\r\n            return node;\r\n\r\n        return this.containingParagraphNode(node.parentNode);\r\n    }\r\n}","import { ScopeData, Tag, TagDisposition, TagPrefix } from '../compilation';\r\nimport { DocxParser } from '../docxParser';\r\nimport { XmlNode, XmlNodeType, XmlTextNode } from '../xmlNode';\r\nimport { TemplatePlugin } from './templatePlugin';\r\n\r\nexport class TextPlugin extends TemplatePlugin {\r\n\r\n    public readonly prefixes: TagPrefix[] = [{\r\n        prefix: '',\r\n        tagType: 'text',\r\n        tagDisposition: TagDisposition.SelfClosed\r\n    }];\r\n\r\n    /**\r\n     * Replace the node text content with the specified value. The value is\r\n     * xml-encoded by the plugin.\r\n     */\r\n    public simpleTagReplacements(tag: Tag, data: ScopeData): void {\r\n\r\n        const value = (data.getScopeData() || '').split('\\n');\r\n\r\n        if (value.length < 2) {\r\n            this.replaceSingleLine(tag.xmlTextNode, value.length ? value[0] : '');\r\n        } else {\r\n            this.replaceMultiLine(tag.xmlTextNode, value);\r\n        }\r\n    }\r\n\r\n    private replaceSingleLine(textNode: XmlTextNode, text: string) {\r\n        textNode.textContent = text;\r\n    }\r\n\r\n    private replaceMultiLine(textNode: XmlTextNode, lines: string[]) {\r\n\r\n        const runNode = this.utilities.docxParser.containingRunNode(textNode);\r\n\r\n        // first lint\r\n        textNode.textContent = lines[0];\r\n\r\n        // other lines\r\n        for (let i = 1; i < lines.length; i++) {\r\n\r\n            // add line break\r\n            const lineBreak = this.getLineBreak();\r\n            XmlNode.appendChild(runNode, lineBreak);\r\n\r\n            // add text\r\n            const lineNode = this.createWordTextNode(lines[i]);\r\n            XmlNode.appendChild(runNode, lineNode);\r\n        }\r\n    }\r\n\r\n    private getLineBreak(): XmlNode {\r\n        return {\r\n            nodeType: XmlNodeType.General,\r\n            nodeName: 'w:br'\r\n        };\r\n    }\r\n\r\n    private createWordTextNode(text: string): XmlNode {\r\n        const wordTextNode = XmlNode.createGeneralNode(DocxParser.TEXT_NODE);\r\n        wordTextNode.childNodes = [\r\n            XmlNode.createTextNode(text)\r\n        ];\r\n        return wordTextNode;\r\n    }\r\n}","import { LoopPlugin } from './loopPlugin';\r\nimport { RawXmlPlugin } from './rawXmlPlugin';\r\nimport { TemplatePlugin } from './templatePlugin';\r\nimport { TextPlugin } from './textPlugin';\r\n\r\nexport function createDefaultPlugins(): TemplatePlugin[] {\r\n    return [\r\n        new LoopPlugin(), \r\n        new RawXmlPlugin(), \r\n        new TextPlugin()\r\n    ];\r\n}","export * from './defaultPlugins';\r\nexport * from './loopPlugin';\r\nexport * from './rawXmlPlugin';\r\nexport * from './templatePlugin';\r\nexport * from './textPlugin';\r\n","import { XmlNode } from \"./xmlNode\";\r\n\r\nexport class Delimiters {\r\n\r\n    public start = \"{\";\r\n    public end = \"}\";\r\n\r\n    constructor(initial?: Delimiters) {\r\n        if (initial) {\r\n\r\n            if (initial.start)\r\n                this.start = XmlNode.encodeValue(initial.start);\r\n\r\n            if (initial.end)\r\n                this.end = XmlNode.encodeValue(initial.end);\r\n\r\n        }\r\n\r\n        if (!this.start || !this.end)\r\n            throw new Error('Both delimiters must be specified.');\r\n\r\n        if (this.start === this.end)\r\n            throw new Error('Start and end delimiters can not be the same.');\r\n\r\n        if (this.start.length > 1 || this.end.length > 1)\r\n            throw new Error(`Only single character delimiters supported (start: '${this.start}', end: '${this.end}').`);\r\n    }\r\n\r\n}","import * as JSZip from 'jszip';\r\nimport { UnidentifiedFileTypeError } from './errors';\r\n\r\nexport enum FileType {\r\n    Docx = 'docx',\r\n    Pptx = 'pptx',\r\n    Odt = 'odt'\r\n}\r\n\r\n// tslint:disable-next-line:no-namespace\r\nexport namespace FileType {\r\n\r\n    export function getFileType(zipFile: JSZip): FileType {\r\n\r\n        if (isDocx(zipFile))\r\n            return FileType.Docx;\r\n\r\n        if (isPptx(zipFile))\r\n            return FileType.Pptx;\r\n\r\n        if (isOdt(zipFile))\r\n            return FileType.Odt;\r\n\r\n        throw new UnidentifiedFileTypeError();\r\n    }\r\n\r\n    export function isDocx(zipFile: JSZip): boolean {\r\n        return !!(zipFile.files[\"word/document.xml\"] || zipFile.files[\"word/document2.xml\"]);\r\n    }\r\n\r\n    export function isPptx(zipFile: JSZip): boolean {\r\n        return !!zipFile.files[\"ppt/presentation.xml\"];\r\n    }\r\n\r\n    export function isOdt(zipFile: JSZip): boolean {\r\n        return !!zipFile.files['mimetype'];\r\n    }\r\n}","import { Delimiters } from './delimiters';\r\nimport { createDefaultPlugins, TemplatePlugin } from './plugins';\r\n\r\n// tslint:disable:whitespace\r\nexport class TemplateHandlerOptions {\r\n\r\n    public plugins?: TemplatePlugin[] = createDefaultPlugins();\r\n\r\n    public delimiters?= new Delimiters();\r\n\r\n    public maxXmlDepth? = 20;\r\n\r\n    constructor(initial?: Partial<TemplateHandlerOptions>) {\r\n        Object.assign(this, initial);\r\n\r\n        if (initial) {\r\n            this.delimiters = new Delimiters(initial.delimiters);\r\n        }\r\n\r\n        if (!this.plugins.length) {\r\n            throw new Error('Plugins list can not be empty');\r\n        }\r\n    }\r\n}\r\n// tslint:enable","import { MissingArgumentError } from './errors';\r\nimport { platform } from './utils';\r\nimport { XmlNode } from './xmlNode';\r\n\r\n// tslint:disable:variable-name\r\n\r\n//\r\n// platform specific modules\r\n//\r\n\r\nlet xmlServices: any;\r\nif (platform.isNode) {\r\n    xmlServices = require(\"xmldom\");\r\n} else {\r\n    xmlServices = window;\r\n}\r\nconst DomParserType: typeof DOMParser = xmlServices.DOMParser;\r\n\r\n//\r\n// parser class\r\n//\r\n\r\nexport class XmlParser {\r\n\r\n    private static xmlHeader = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>';\r\n    private static readonly parser = new DomParserType();\r\n\r\n    public parse(str: string): XmlNode {\r\n        const doc = this.domParse(str);\r\n        return XmlNode.fromDomNode(doc.documentElement);\r\n    }\r\n\r\n    public domParse(str: string): Document {\r\n        if (str === null || str === undefined)\r\n            throw new MissingArgumentError(\"str\");\r\n\r\n        return XmlParser.parser.parseFromString(str, \"text/xml\");\r\n    }\r\n\r\n    public serialize(xmlNode: XmlNode): string {\r\n        return XmlParser.xmlHeader + XmlNode.serialize(xmlNode);\r\n    }    \r\n}\r\n","import * as JSZip from 'jszip';\r\nimport { DelimiterSearcher, ScopeData, TagParser, TemplateCompiler, TemplateContext } from './compilation';\r\nimport { DocxParser } from './docxParser';\r\nimport { UnsupportedFileTypeError } from './errors';\r\nimport { FileType } from './fileType';\r\nimport { TemplateHandlerOptions } from './templateHandlerOptions';\r\nimport { Binary, IMap } from './utils';\r\nimport { XmlNode } from './xmlNode';\r\nimport { XmlParser } from './xmlParser';\r\n\r\nexport class TemplateHandler {\r\n\r\n    private readonly docxParser = new DocxParser();\r\n    private readonly xmlParser = new XmlParser();\r\n    private readonly compiler: TemplateCompiler;\r\n\r\n    private readonly options: TemplateHandlerOptions;\r\n\r\n    constructor(options?: TemplateHandlerOptions) {\r\n        this.options = new TemplateHandlerOptions(options);\r\n\r\n        //\r\n        // this is the library's composition root\r\n        //\r\n\r\n        const delimiterSearcher = new DelimiterSearcher();\r\n        delimiterSearcher.startDelimiter = this.options.delimiters.start;\r\n        delimiterSearcher.endDelimiter = this.options.delimiters.end;\r\n        delimiterSearcher.maxXmlDepth = this.options.maxXmlDepth;\r\n\r\n        const prefixes = this.options.plugins\r\n            .map(plugin => plugin.prefixes)\r\n            .reduce((total, current) => total.concat(current), []);\r\n\r\n        const tagParser = new TagParser(prefixes, this.docxParser);\r\n        tagParser.startDelimiter = this.options.delimiters.start;\r\n        tagParser.endDelimiter = this.options.delimiters.end;\r\n\r\n        this.compiler = new TemplateCompiler(\r\n            delimiterSearcher,\r\n            tagParser,\r\n            this.options.plugins\r\n        );\r\n\r\n        this.options.plugins.forEach(plugin => {\r\n            plugin.setUtilities({\r\n                xmlParser: this.xmlParser,\r\n                docxParser: this.docxParser,\r\n                compiler: this.compiler\r\n            });\r\n        });\r\n    }\r\n\r\n    public async process<T extends Binary>(templateFile: T, data: any): Promise<T> {\r\n\r\n        // load the docx (zip) file\r\n        const docFile = await this.loadDocx(templateFile);\r\n\r\n        // extract content as xml documents\r\n        const contentDocuments = await this.parseContentDocuments(docFile);\r\n\r\n        // process content (do replacements)        \r\n        const scopeData = new ScopeData(data);\r\n        const context: TemplateContext = {\r\n            zipFile: docFile,\r\n            currentFilePath: null\r\n        };\r\n        for (const file of Object.keys(contentDocuments)) {\r\n            context.currentFilePath = file;\r\n            this.compiler.compile(contentDocuments[file], scopeData, context);\r\n        }\r\n\r\n        // update the docx file\r\n        for (const file of Object.keys(contentDocuments)) {\r\n            const processedFile = contentDocuments[file];\r\n            const xmlContent = this.xmlParser.serialize(processedFile);\r\n            docFile.file(file, xmlContent, { createFolders: true });\r\n        }\r\n\r\n        // export\r\n        const outputType: JSZip.OutputType = Binary.toJsZipOutputType(templateFile);\r\n        return docFile.generateAsync({ type: outputType }) as Promise<T>;\r\n    }\r\n\r\n    public async getText(docxFile: Binary): Promise<string> {\r\n        const zipFile = await this.loadDocx(docxFile);\r\n        const mainXmlFile = this.docxParser.mainFilePath(zipFile);\r\n        const xmlContent = await zipFile.files[mainXmlFile].async('text');\r\n        const document = this.xmlParser.domParse(xmlContent);\r\n        return document.documentElement.textContent;\r\n    }\r\n\r\n    //\r\n    // private methods\r\n    //\r\n\r\n    private async loadDocx(file: Binary): Promise<JSZip> {\r\n        const docFile = await JSZip.loadAsync(file);\r\n        const fileType = FileType.getFileType(docFile);\r\n        if (fileType !== FileType.Docx)\r\n            throw new UnsupportedFileTypeError(fileType);\r\n\r\n        return docFile;\r\n    }\r\n\r\n    /**\r\n     * Returns a map where the key is the **file path** and the value is a **parsed document**.\r\n     */\r\n    private async parseContentDocuments(docFile: JSZip): Promise<IMap<XmlNode>> {\r\n\r\n        const contentFiles = this.docxParser.contentFilePaths(docFile);\r\n\r\n        // some content files may not always exist (footer.xml for example)\r\n        const existingContentFiles = contentFiles.filter(file => docFile.files[file]);\r\n\r\n        const contentDocuments: IMap<XmlNode> = {};\r\n        for (const file of existingContentFiles) {\r\n\r\n            // extract the content from the content file\r\n            const textContent = await docFile.files[file].async('text');\r\n\r\n            // parse the content as xml\r\n            contentDocuments[file] = this.xmlParser.parse(textContent);\r\n        }\r\n\r\n        return contentDocuments;\r\n    }\r\n}","export * from './compilation';\r\nexport * from './errors';\r\nexport * from './plugins';\r\nexport * from './delimiters';\r\nexport * from './docxParser';\r\nexport * from './templateHandler';\r\nexport * from './templateHandlerOptions';\r\nexport * from './utils/binary';\r\nexport * from './xmlNode';\r\nexport * from './xmlParser';\r\n","import * as JSZip from 'jszip';\r\nimport { MissingArgumentError } from '../errors';\r\n\r\nexport type Binary = Blob | Buffer | ArrayBuffer;\r\n\r\n// tslint:disable-next-line:no-namespace\r\nexport namespace Binary {\r\n\r\n    export function toJsZipOutputType(binary: Binary): JSZip.OutputType {\r\n        if (!binary)\r\n            throw new MissingArgumentError(\"binary\");\r\n\r\n        if (typeof Blob !== 'undefined' && binary instanceof Blob)\r\n            return 'blob';\r\n        if (typeof ArrayBuffer !== 'undefined' && binary instanceof ArrayBuffer)\r\n            return 'arraybuffer';\r\n        if (typeof Buffer !== 'undefined' && binary instanceof Buffer)\r\n            return 'nodebuffer';\r\n\r\n        throw new Error(`Binary type '${(binary as any).constructor.name}' is not supported.`);\r\n\r\n    }\r\n}","\r\nclass Platform {\r\n\r\n    private _isNode: boolean = null;\r\n\r\n    public get isNode(): boolean {\r\n        if (this._isNode === null) {\r\n\r\n            // https://stackoverflow.com/questions/4224606/how-to-check-whether-a-script-is-running-under-node-js\r\n\r\n            const isNodeJS = (\r\n                (typeof process !== 'undefined') &&\r\n                (typeof (process as any).release !== 'undefined') &&\r\n                (process as any).release.name === 'node'\r\n            );\r\n            const isBrowser = (typeof window !== 'undefined');\r\n\r\n            this._isNode = (isNodeJS || !isBrowser);\r\n        }\r\n        return this._isNode;\r\n    }\r\n}\r\n\r\nexport const platform = new Platform();","module.exports = require(\"base64-js\");","module.exports = require(\"ieee754\");","module.exports = require(\"isarray\");","module.exports = require(\"jszip\");","module.exports = require(\"lodash.get\");","module.exports = require(\"xmldom\");"],"sourceRoot":""}